u <- 0.2 * rnorm(10000)
# true model:
error <- rnorm(10000)
weedsmokingstar <- -3.5 + 2.5 * parents - 0.25 * sport + 1.2 * lazy - 0.01 *
distance + error
# check whether there a negative grams...  hint: weedsmokingstar == 0
weedsmoking <- rep(0, 10000)
weedsmoking[weedsmokingstar > 6] <- 1
gpa <- 7.8 - 0.2 * weedsmoking - 0.2 * parents - 0.15 * sport - 0.4 * lazy + u
gpa
sport
rbeta
parents
lazy
success <- sample(1:6, size = 1000, replace=TRUE)
success
rnorm
laziness <- rnorm(10000, 7, 1)
gpa <- 1 - 0.5*laziness + 0.01*distance + 0.1*cash - 0.3*parents1 + error1
gpa
u <- 0.2 * rnorm(10000)
error <- 0.1*rnorm(1000)
gpa <- 1 - 0.5*laziness + 0.01*distance + 0.1*cash - 0.3*parents1 + error1
gpa
### Assignment II
# Make example reproducable
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(10000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(10000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents1 <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.1*rnorm(1000)
# Model
gpa <- 1 - 0.5*laziness + 0.01*distance + 0.1*cash - 0.3*parents1 + error1
gpa
# Error Term
error <- 0.2*rnorm(1000)
# Error Term
error1 <- 0.2*rnorm(1000)
gpa <- 1 - 0.5*laziness + 0.01*distance + 0.1*cash - 0.3*parents1 + error1
gpa
cash
gpa <- 1 - 0.5*laziness + 0.01*distance  - 0.3*parents1 + error1
gpa
gpa <- 4 - 0.5*laziness + 0.01*distance  - 0.3*parents1 + error1
gpa
cash
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents1 + 0.001*cash + error1
gpa
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents1 + 0.0001*cash + error1
gpa
# Make example reproducible
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(10000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(10000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.2*rnorm(1000)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents1 + 0.0001*cash + error1
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + 0.0001*cash + error
gpa
# Regression
fit <- lm(gpa ~ laziness + distance + parents + cash + error)
summary(fit)
### Assignment II
# Make example reproducible
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(10000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(10000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.2*rnorm(1000)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + 0.0001*cash + error
# Regression
fit <- lm(gpa ~ laziness + distance + parents + cash + error)
summary(fit)
# Regression
fit <- lm(gpa ~ laziness + distance + parents + cash + error)
# Regression
fit <- lm(gpa ~ laziness + distance + parents + cash + error)
distance
# Regression
fit <- lm(gpa ~ laziness + parents + cash + error)
summary(fit)
# Plot
plot(cash, gpa)
plot(cash, gpa)
### Assignment II
# Make example reproducible
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(10000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(10000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.2*rnorm(1000)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + error
gpa
plot(cash, gpa)
cash
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(10000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(10000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.2*rnorm(1000)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + error
# Plot
plot(cash, gpa)
cash <- sample(1000:20000, size = 1000, replace = TRUE)
plot(cash, gpa)
### Assignment II
# Make example reproducible
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(10000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(1000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.2*rnorm(1000)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + error
# Plot
plot(cash, gpa)
plot(cash, gpa)
laziness <- rnorm(1000, 7, 1)
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + erro
### Assignment II
# Make example reproducible
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(1000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(1000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.2*rnorm(1000)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + error
# Plot
plot(cash, gpa)
# Generate success of students
previous_avg_gpa <- sample(1:6, size = 1000, replace=TRUE)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + 0.5*previous_avg_gpa error
# Generate success of students
previous_avg_gpa <- sample(1:6, size = 1000, replace=TRUE)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + 0.5*previous_avg_gpa error
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + 0.5*previous_avg_gpa + error
gpa
plot(cash, gpa)
abline(lm(gpa~cash), col="red")
a <- abline(lm(gpa~cash), col="red")
a
plot(cash, gpa)
abline(lm(gpa~cash), col="red")
# Packages
#install.packages("datasets.load")
library(datasets.load)
# Setting Working Directory
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/GitHub/Data-Analytics-Project")
# Dataset: Swiss
help(swiss)
View(swiss)
mydata <- swiss # Save dataset under the name "mydata"
mydata
mydata
### Descriptive Statistics
table(swiss)/length(swiss)
### Descriptive Statistics
relative <- table(swiss)/length(swiss)
relative
### Descriptive Statistics
relative <- table(swiss)/length(swiss)
### Descriptive Statistics
relative <- table(swiss)/length(swiss)
relative
table(swiss)/length(swiss)
### Descriptive Statistics
Rel.Freq = mydata[,2]/length(mydata)
Rel.Freq
### Descriptive Statistics
Rel.Freq = mydata[,1]/length(mydata)
Rel.Freq
### Descriptive Statistics
Rel.Freq = mydata[,0]/length(mydata)
Rel.Freq
### Descriptive Statistics
Rel.Freq = mydata[,7]/length(mydata)
### Descriptive Statistics
Rel.Freq = mydata[,6]/length(mydata)
Rel.Freq
Rel.Freq_Agriculture = mydata[,2]/length(mydata)
Rel.Freq_Agriculture
Rel.Freq_Examination
Rel.Freq_Examination = mydata[,3]/length(mydata)
Rel.Freq_Education = mydata[,4]/length(mydata)
Rel.Freq_Catholic = mydata[,5]/length(mydata)
Rel.Freq_InfantMortality = mydata[,6]/length(mydata)
# Boxplots
boxplot(mydata)
# Correlations
cor(mydata)
#' Summary
summary(mydata)
#' Histogram
hist(mydata$Fertility, main = Fertility, xlab = Ferility)
#' Histogram
hist(mydata$Fertility, main = Fertility, xlab = Fertility)
#' Histogram
hist(swiss$Fertility,main="Fertility",xlab="Fertility")
#' Histogram
hist(mydata$Fertility,main="Fertility",xlab="Fertility")
#' Histogram
hist(mydata$Fertility,main="Fertility3",xlab="Fertility")
plot(density(swiss$Fertility),main="Fertility")
rug(swiss$Fertility)
plot(density(swiss$Fertility),main="Fertility")
rug(swiss$Fertility)
#' Histogram
hist(mydata$Fertility,main="Fertility",xlab="Fertility") #Fertility rates are mostly between 60 and 90%
cor(mydata)
pairs(mydata)
swiss
help(swiss)
library(datasets.load)
library(tidyverse)
library(ggplot2)
library(dplyr)
# Setting Working Directory
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/GitHub/Data-Analytics-Project")
install.packages("datasets.load")
library(datasets.load)
library(tidyverse)
library(ggplot2)
library(dplyr)
help(swiss)
View(swiss)
mydata <- swiss
Fertility <- mydata$Fertility
Agriculture <- mydata$Agriculture
Examination <- mydata$Examination
Education <- mydata$Education
Catholic <- mydata$Catholic
InfantMortality <- mydata$Infant.Mortality
# Relative Frequencies
Rel.Freq_Fertility = mydata[,1]/length(mydata)
Rel.Freq_Fertility
Rel.Freq_Fertility = Fertility/length(mydata)
Rel.Freq_Agriculture = Agriculture/length(mydata)
Rel.Freq_Examination = Examination/length(mydata)
Rel.Freq_Education = Education/length(mydata)
Rel.Freq_Catholic = Catholic/length(mydata)
Rel.Freq_InfantMortality = InfantMortality/length(mydata)
summary(mydata)
## Drawing a boxplot for first inspection ##
boxplot(mydata)
#' Histogram: Distribution
hist(mydata$Fertility,main="Fertility",xlab="Fertility") # Fertility rates are mostly between 60 and 90%
hist(Fertility, main = "Fertility", xlab = "Fertility") # Fertility rates are mostly between 60 and 90%
plot(density(Fertility), main = "Fertility") # a little bit right skewed
Fertility_low <- c(Fertility <= 60)
Fertility_low
Fertility_average <- c(Fertility > 60, Fertility <= 90)
Fertilty_average
Fertility_average
Fertility_average <- between(Fertility, 60, 90)
Fertility_average
Fertility_high <- c(Fertility => 90)
Fertility_high <- c(Fertility >= 90)
Fertility_high
Rel.Freq_Fertility_low <- Fertility_low / length(mydata)
Rel.Freq_Fertility_low
Rel.Freq_Fertility_low <- Fertility_low / length(mydata)
Rel.Freq_Fertility_average <- Fertility_average / length(mydata)
Rel.Freq_Fertility_high <- Fertility_high / length(mydata)
Rel.Freq_Fertility_average
Rel.Freq_Fertility_low <- count(Fertility_low) / length(mydata)
Rel.Freq_Fertility_low <- sum(Fertility_low) / length(mydata)
Rel.Freq_Fertility_low
Fertility_low
sum(Fertility_low)
length(mydata)
length(Fertility)
Rel.Freq_Fertility_low <- sum(Fertility_low) / length(Fertility)
Rel.Freq_Fertility_average <- sum(Fertility_average) / length(Fertility)
Rel.Freq_Fertility_high <- sum(Fertility_high) / length(Fertility)
print(Rel.Freq_Fertility_low)
print(Rel.Freq_Fertility_average)
print(Rel.Freq_Fertility_high)
lower_bound <- 60
upper_bound <- 90
lower_bound <- 60
upper_bound <- 90
Fertility_low <- c(Fertility <= lower_bound)
Fertility_average <- between(Fertility, lower_bound, upper_bound)
Fertility_high <- c(Fertility >= upper_bound)
Rel.Freq_Fertility_low <- sum(Fertility_low) / length(Fertility)
Rel.Freq_Fertility_average <- sum(Fertility_average) / length(Fertility)
Rel.Freq_Fertility_high <- sum(Fertility_high) / length(Fertility)
print(Rel.Freq_Fertility_low)
print(Rel.Freq_Fertility_average)
print(Rel.Freq_Fertility_high)
Rel.Freq_Fertility_low + Rel.Freq_Fertility_average + Rel.Freq_Fertility_high
#### Histogram: Distribution ####
hist(Fertility, main = "Fertility", xlab = "Fertility") # Fertility rates are mostly between 60 and 90%
#'  Correlations
cor(mydata) # correlations with response variable lower than .8.
cov(mydata)
cor(mydata) # correlations with response variable lower than .8.
require(lattice)
levelplot(cor(mydata), xlab = "", ylab = "")
pairs(mydata) # assumption: linear relationship between education and examination/examination and agriculture
mydata %>%
select(Fertility) %>%
arrange(desc(Fertility)) %>%
head(10)
mydata %>%
select(Fertility) %>%
arrange(desc(Fertility)) %>%
tail(10) # Cities: Geneve, Lausanne, Nyone
#' Relationship Agriculture Fertility
mydata %>%
ggplot() +
geom_point(mapping = aes(x = Agriculture, y = Fertility)) +
geom_smooth(mapping = aes(x = Agriculture, y = Fertility),
method = "lm")
#' Relationship Examination Fertility
mydata %>%
ggplot() +
geom_point(mapping = aes(x = Examination, y = Fertility)) +
geom_smooth(mapping = aes(x = Examination, y = Fertility),
method = "lm")
mydata %>%
ggplot() +
xlab("Examination") +
ylab("Fertility") +
geom_point(mapping = aes(
x = Examination,
y = Fertility,
color = Examination,
size = Fertility,
alpha = 0.5)) +
geom_smooth(mapping = aes(
x = Examination,
y = Fertility),
method = "lm")
#' Relationship Education Fertility
mydata %>%
ggplot() +
geom_point(mapping = aes(x = Education, y = Fertility)) +
geom_smooth(mapping = aes(x = Education, y = Fertility),
method = "lm")
#' Relationship Catholic Fertility
mydata %>%
ggplot() +
geom_point(mapping = aes(x = Catholic, y = Fertility)) +
geom_smooth(mapping = aes(x = Catholic, y = Fertility),
method = "lm") # Two regions as either high in catholic or low
#' Relationship Infant Mortality Fertility
mydata %>%
ggplot() +
geom_point(mapping = aes(x = Infant.Mortality, y = Fertility)) +
geom_smooth(mapping = aes(x = Infant.Mortality, y = Fertility),
method = "lm")
## Full Model
Reg_full <- lm(Fertility ~  Agriculture + Education + Examination + Catholic + Infant.Mortality, data = mydata)
summary(Reg_full) # Examination not significant
Reg_fullwoexam <- lm(Fertility ~  Agriculture + Education + Catholic + Infant.Mortality, data = mydata)
summary(Reg_fullwoexam)
#' Relationship Education Fertility
mydata %>%
ggplot() +
geom_point(mapping = aes(x = Education, y = Fertility)) +
geom_smooth(mapping = aes(x = Education, y = Fertility),
method = "lm")
plot(x = Fertility, xlab = "Fertility", xlim = c(0,100), y = Education, ylab = "Education",
main = "Swiss Fertility and Education Indicators", pch = 19, col="black")
simple.regression_FertilityEdcuation <- lm(Fertility ~ Education, data = swiss)
abline(simple.regression_FertilityEdcuation, col = "red")
plot(x = Education, xlab = "Education", y = Fertility, ylab = "Fertility", ylim = c(0,100),
main = "Swiss Fertility and Education Indicators", pch = 19, col="black")
abline(simple.regression_FertilityEdcuation, col = "red")
mydata %>%
ggplot() +
xlab("Examination") +
ylab("Fertility") +
geom_point(mapping = aes(
x = Examination,
y = Fertility,
color = Examination,
size = Fertility,
alpha = 0.5)) +
geom_smooth(mapping = aes(
x = Examination,
y = Fertility),
method = "lm")
plot(x = Fertility, xlab = "Fertility", xlim = c(0,100), y = Education, ylab = "Education",
main = "Swiss Fertility and Education Indicators", pch = 19, col="black")
simple.regression_FertilityEdcuation <- lm(Fertility ~ Education, data = swiss)
abline(simple.regression_FertilityEdcuation, col = "red")
mydata %>%
ggplot() +
xlab("Examination") +
ylab("Fertility") +
geom_point(mapping = aes(
x = Examination,
y = Fertility,
color = Examination,
size = Fertility,
alpha = 0.5)) +
geom_smooth(mapping = aes(
x = Examination,
y = Fertility),
method = "lm")
mydata %>%
ggplot() +
geom_point(mapping = aes(x = Education, y = Fertility)) +
geom_smooth(mapping = aes(x = Education, y = Fertility),
method = "lm")
plot(x = Fertility, xlab = "Fertility", xlim = c(0,100), y = Education, ylab = "Education",
main = "Swiss Fertility and Education Indicators", pch = 19, col="black")
simple.regression_FertilityEdcuation <- lm(Fertility ~ Education, data = swiss)
abline(simple.regression_FertilityEdcuation, col = "red")
mydata %>%
ggplot() +
geom_point(mapping = aes(x = Education, y = Fertility)) +
geom_smooth(mapping = aes(x = Education, y = Fertility),
method = "lm")
plot(x = Fertility, xlab = "Fertility", xlim = c(0,100), y = Education, ylab = "Education",
main = "Swiss Fertility and Education Indicators", pch = 19, col="black")
simple.regression_FertilityEdcuation <- lm(Fertility ~ Education, data = swiss)
abline(simple.regression_FertilityEdcuation, col = "red")
plot(x = Education, xlab = "Education", y = Fertility, ylab = "Fertility", ylim = c(0,100),
main = "Swiss Fertility and Education Indicators", pch = 19, col="black")
abline(simple.regression_FertilityEdcuation, col = "red")
mydata %>%
ggplot() +
geom_point(mapping = aes(x = Education, y = Fertility)) +
geom_smooth(mapping = aes(x = Education, y = Fertility),
method = "lm")
mydata %>%
ggplot(xlim(0, 100)) +
geom_point(mapping = aes(x = Education, y = Fertility)) +
geom_smooth(mapping = aes(x = Education, y = Fertility),
method = "lm")
mydata %>%
ggplot() +
geom_point(mapping = aes(x = Education, y = Fertility)) +
geom_smooth(mapping = aes(x = Education, y = Fertility),
method = "lm") +
ylim(0, 100)
