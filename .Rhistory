install.packages("datasets.load")
help(swiss)
view(swiss)
View(swiss)
datasets.load
## Library
library(datasets.load)
help(swiss)
View(swiss)
install.packages("datasets.load")
help(swiss)
View(swiss)
mydata <- swiss
sample(10)
help(sample)
sample(x, size = 1000)
sample(study)
study <- c(0, 1, 2, 3, 4, 5, 6, 7, 8)
sample(study)
sample(study, size = 1000)
sample(0:8, size = 1000)
sample(1:8, size = 1000)
sample.int(1:8, size = 1000)
sample.int(1:8, size = 4)
sample.int(1:8, size = 4, replace=FALSE)
sample.int(1:8, size = 4, replace=True)
sample.int(1:8, size = 4, replace=TRUE)
sample.int(1:8, size = 4, replace=TRUE)
#
#
sample(1:6, size=100, replace=TRUE)
study_hours <- sample(0:8, size=1000, replace=TRUE)
study_hours
# IQ
iq <- sample(70:170, size = 1000, replace = TRUE)
iq
# Cash Transfer
cash <- sample(10000:20000, size = 1000, replace = TRUE)
scatter.smooth(cash, iq)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
scatter.smooth(cash, success)
# Generate household
income <- rnorm(1000, mean = 0, sd = 1)
income
success <- sample(1:6, size = 1000, replace=TRUE)
success
study_hours <- sample(0:8, size=1000, replace=TRUE)
iq <- sample(70:170, size = 1000, replace = TRUE)
cash <- sample(10000:20000, size = 1000, replace = TRUE)
cash
# Model
OLS = lm(success ~ study_hours + iq + cash)
OLS
summary(OLS)
# Plotting
plot(success, cash)
# Model
OLS = lm(success ~ cash)
summary(OLS)
?rnorm
distance <- rnorm (10000, 100, 40)
distance
rbinom
?rbinom
# Error Term
u <- 0.2 * rnorm(10000)
u
# Error Term
u <- 0.2 * rnorm(1000)
rnorm
?rnorm
u <- 0.2 * rnorm(1000)
u
# Parents
parents <- rbinom(1000, 1, 0.1)
parents
gpa <- 4 + 0.2*success + 0.2* study_hours - 0.01*distance + 0.3*cash - 0.2*parents + u
gpa
gpa <- 4 + 0.2*success + 0.2* study_hours - 0.01*distance + 0.3*cash - 0.2*parents + error
gpa
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Number of study hours per week (max 8 hours per day)
study_hours <- sample(0:8, size=1000, replace=TRUE)
# Distance
distance <- rnorm (1000, 100, 40)
#Cash Transfer
cash <- sample(10000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents <- rbinom(1000, 1, 0.1)
# Error Term
error <- rnorm(1000)
gpa <- 4 + 0.2*success + 0.2* study_hours - 0.01*distance + 0.3*cash - 0.2*parents + error
gpa
gpa <- 1 + 0.2*success + 0.2* study_hours - 0.01*distance + 0.3*cash - 0.2*parents + error
gpa
success
study_hours
gpa <- 1 + 0.2* study_hours - 0.1*distance + 0.4*cash - 0.3*parents + error
gpa
sport <- 10 * rbeta(10000, 2, 6)
lazy <- rnorm(10000, 8, 1)
parents <- rbinom(10000, 1, 0.1)
# instrument
distance <- rnorm(10000, 100, 30)
u <- 0.2 * rnorm(10000)
# true model:
error <- rnorm(10000)
weedsmokingstar <- -3.5 + 2.5 * parents - 0.25 * sport + 1.2 * lazy - 0.01 *
distance + error
# check whether there a negative grams...  hint: weedsmokingstar == 0
weedsmoking <- rep(0, 10000)
weedsmoking[weedsmokingstar > 6] <- 1
# true model
gpa
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Number of study hours per week (max 8 hours per day)
study_hours <- sample(0:8, size=1000, replace=TRUE)
# Distance
distance <- rnorm (1000, 100, 40)
#Cash Transfer
cash <- sample(10000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents1 <- rbinom(1000, 1, 0.1)
# Error Term
error1 <- rnorm(1000)
# Model
gpa <- 1 + 0.2* study_hours - 0.1*distance + 0.4*cash - 0.3*parents1 + error1
sport <- 10 * rbeta(10000, 2, 6)
lazy <- rnorm(10000, 8, 1)
parents <- rbinom(10000, 1, 0.1)
# instrument
distance <- rnorm(10000, 100, 30)
u <- 0.2 * rnorm(10000)
# true model:
error <- rnorm(10000)
weedsmokingstar <- -3.5 + 2.5 * parents - 0.25 * sport + 1.2 * lazy - 0.01 *
distance + error
# check whether there a negative grams...  hint: weedsmokingstar == 0
weedsmoking <- rep(0, 10000)
weedsmoking[weedsmokingstar > 6] <- 1
gpa <- 7.8 - 0.2 * weedsmoking - 0.2 * parents - 0.15 * sport - 0.4 * lazy + u
gpa
sport
rbeta
parents
lazy
success <- sample(1:6, size = 1000, replace=TRUE)
success
rnorm
laziness <- rnorm(10000, 7, 1)
gpa <- 1 - 0.5*laziness + 0.01*distance + 0.1*cash - 0.3*parents1 + error1
gpa
u <- 0.2 * rnorm(10000)
error <- 0.1*rnorm(1000)
gpa <- 1 - 0.5*laziness + 0.01*distance + 0.1*cash - 0.3*parents1 + error1
gpa
### Assignment II
# Make example reproducable
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(10000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(10000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents1 <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.1*rnorm(1000)
# Model
gpa <- 1 - 0.5*laziness + 0.01*distance + 0.1*cash - 0.3*parents1 + error1
gpa
# Error Term
error <- 0.2*rnorm(1000)
# Error Term
error1 <- 0.2*rnorm(1000)
gpa <- 1 - 0.5*laziness + 0.01*distance + 0.1*cash - 0.3*parents1 + error1
gpa
cash
gpa <- 1 - 0.5*laziness + 0.01*distance  - 0.3*parents1 + error1
gpa
gpa <- 4 - 0.5*laziness + 0.01*distance  - 0.3*parents1 + error1
gpa
cash
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents1 + 0.001*cash + error1
gpa
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents1 + 0.0001*cash + error1
gpa
# Make example reproducible
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(10000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(10000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.2*rnorm(1000)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents1 + 0.0001*cash + error1
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + 0.0001*cash + error
gpa
# Regression
fit <- lm(gpa ~ laziness + distance + parents + cash + error)
summary(fit)
### Assignment II
# Make example reproducible
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(10000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(10000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.2*rnorm(1000)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + 0.0001*cash + error
# Regression
fit <- lm(gpa ~ laziness + distance + parents + cash + error)
summary(fit)
# Regression
fit <- lm(gpa ~ laziness + distance + parents + cash + error)
# Regression
fit <- lm(gpa ~ laziness + distance + parents + cash + error)
distance
# Regression
fit <- lm(gpa ~ laziness + parents + cash + error)
summary(fit)
# Plot
plot(cash, gpa)
plot(cash, gpa)
### Assignment II
# Make example reproducible
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(10000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(10000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.2*rnorm(1000)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + error
gpa
plot(cash, gpa)
cash
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(10000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(10000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.2*rnorm(1000)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + error
# Plot
plot(cash, gpa)
cash <- sample(1000:20000, size = 1000, replace = TRUE)
plot(cash, gpa)
### Assignment II
# Make example reproducible
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(10000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(1000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.2*rnorm(1000)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + error
# Plot
plot(cash, gpa)
plot(cash, gpa)
laziness <- rnorm(1000, 7, 1)
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + erro
### Assignment II
# Make example reproducible
set.seed(14)
# Generate success of students
success <- sample(1:6, size = 1000, replace=TRUE)
## Generate observations for each input variable
# Laziness score with mean 7 and sd 1 (10 = super lazy)
laziness <- rnorm(1000, 7, 1)
# Distance to university/school (mean 400 meter from school)
distance <- rnorm (1000, 400, 40)
#Cash Transfer
cash <- sample(1000:20000, size = 1000, replace = TRUE)
# Parents (binary, if parents have a good or bad background)
parents <- rbinom(1000, 1, 0.1)
# Error Term
error <- 0.2*rnorm(1000)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + error
# Plot
plot(cash, gpa)
# Generate success of students
previous_avg_gpa <- sample(1:6, size = 1000, replace=TRUE)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + 0.5*previous_avg_gpa error
# Generate success of students
previous_avg_gpa <- sample(1:6, size = 1000, replace=TRUE)
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + 0.5*previous_avg_gpa error
# Model
gpa <- 4 - 0.5*laziness + 0.01*distance - 0.3*parents + 0.5*previous_avg_gpa + error
gpa
plot(cash, gpa)
abline(lm(gpa~cash), col="red")
a <- abline(lm(gpa~cash), col="red")
a
plot(cash, gpa)
abline(lm(gpa~cash), col="red")
# Packages
#install.packages("datasets.load")
library(datasets.load)
# Setting Working Directory
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/GitHub/Data-Analytics-Project")
# Dataset: Swiss
help(swiss)
View(swiss)
mydata <- swiss # Save dataset under the name "mydata"
mydata
mydata
### Descriptive Statistics
table(swiss)/length(swiss)
### Descriptive Statistics
relative <- table(swiss)/length(swiss)
relative
### Descriptive Statistics
relative <- table(swiss)/length(swiss)
### Descriptive Statistics
relative <- table(swiss)/length(swiss)
relative
table(swiss)/length(swiss)
### Descriptive Statistics
Rel.Freq = mydata[,2]/length(mydata)
Rel.Freq
### Descriptive Statistics
Rel.Freq = mydata[,1]/length(mydata)
Rel.Freq
### Descriptive Statistics
Rel.Freq = mydata[,0]/length(mydata)
Rel.Freq
### Descriptive Statistics
Rel.Freq = mydata[,7]/length(mydata)
### Descriptive Statistics
Rel.Freq = mydata[,6]/length(mydata)
Rel.Freq
Rel.Freq_Agriculture = mydata[,2]/length(mydata)
Rel.Freq_Agriculture
Rel.Freq_Examination
Rel.Freq_Examination = mydata[,3]/length(mydata)
Rel.Freq_Education = mydata[,4]/length(mydata)
Rel.Freq_Catholic = mydata[,5]/length(mydata)
Rel.Freq_InfantMortality = mydata[,6]/length(mydata)
# Boxplots
boxplot(mydata)
# Correlations
cor(mydata)
#' Summary
summary(mydata)
#' Histogram
hist(mydata$Fertility, main = Fertility, xlab = Ferility)
#' Histogram
hist(mydata$Fertility, main = Fertility, xlab = Fertility)
#' Histogram
hist(swiss$Fertility,main="Fertility",xlab="Fertility")
#' Histogram
hist(mydata$Fertility,main="Fertility",xlab="Fertility")
#' Histogram
hist(mydata$Fertility,main="Fertility3",xlab="Fertility")
plot(density(swiss$Fertility),main="Fertility")
rug(swiss$Fertility)
plot(density(swiss$Fertility),main="Fertility")
rug(swiss$Fertility)
#' Histogram
hist(mydata$Fertility,main="Fertility",xlab="Fertility") #Fertility rates are mostly between 60 and 90%
cor(mydata)
pairs(mydata)
swiss
help(swiss)
